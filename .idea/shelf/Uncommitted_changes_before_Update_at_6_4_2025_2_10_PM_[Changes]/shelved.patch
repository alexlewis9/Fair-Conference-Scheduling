Index: src/cli/visual.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-06-03T20:00:56.775486Z\",\r\n     \"start_time\": \"2025-06-03T20:00:56.769286Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"import json\\n\",\r\n    \"import csv\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"from sklearn.decomposition import PCA\\n\",\r\n    \"import plotly.graph_objs as go\\n\",\r\n    \"from matplotlib import colormaps\\n\",\r\n    \"from scipy.spatial import ConvexHull\\n\",\r\n    \"import os\\n\",\r\n    \"from src import PROJECT_ROOT, DATA_DIR\\n\",\r\n    \"from src.utils.io import load_json\"\r\n   ],\r\n   \"id\": \"4383970a382e1e1f\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 10\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-06-03T20:00:58.345654Z\",\r\n     \"start_time\": \"2025-06-03T20:00:58.338135Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# === Load Clustering CSV ===\\n\",\r\n    \"def load_clustering(file_path):\\n\",\r\n    \"    clustering = {}  # method -> node_id -> cluster_label\\n\",\r\n    \"    with open(file_path, newline='', encoding='utf-8') as f:\\n\",\r\n    \"        reader = csv.DictReader(f)\\n\",\r\n    \"        cluster_names = reader.fieldnames[1:]\\n\",\r\n    \"        for row in reader:\\n\",\r\n    \"            method = row[\\\"method\\\"]\\n\",\r\n    \"            clustering[method] = {}\\n\",\r\n    \"            for cluster_name in cluster_names:\\n\",\r\n    \"                ids = row[cluster_name].split(\\\",\\\") if row[cluster_name] else []\\n\",\r\n    \"                for node_id in ids:\\n\",\r\n    \"                    node_id = node_id.strip()\\n\",\r\n    \"                    if node_id:\\n\",\r\n    \"                        clustering[method][node_id] = cluster_name\\n\",\r\n    \"    return clustering\\n\"\r\n   ],\r\n   \"id\": \"2c229559e6116cee\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 11\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-06-03T20:01:00.009169Z\",\r\n     \"start_time\": \"2025-06-03T20:01:00.002726Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# === Convex Hull Generation ===\\n\",\r\n    \"def cluster_hull_trace(xs, ys, cluster_name, color):\\n\",\r\n    \"    if len(xs) < 3:\\n\",\r\n    \"        return None  # Not enough points for a hull\\n\",\r\n    \"    points = np.vstack((xs, ys)).T\\n\",\r\n    \"    hull = ConvexHull(points)\\n\",\r\n    \"    polygon = points[hull.vertices]\\n\",\r\n    \"    return go.Scatter(\\n\",\r\n    \"        x=polygon[:, 0].tolist() + [polygon[0, 0]],\\n\",\r\n    \"        y=polygon[:, 1].tolist() + [polygon[0, 1]],\\n\",\r\n    \"        fill='toself',\\n\",\r\n    \"        mode='lines',\\n\",\r\n    \"        name=f\\\"{cluster_name} boundary\\\",\\n\",\r\n    \"        line=dict(color=color, width=1),\\n\",\r\n    \"        fillcolor=color.replace(\\\"rgb\\\", \\\"rgba\\\").replace(\\\")\\\", \\\",0.15)\\\"),\\n\",\r\n    \"        hoverinfo='skip',\\n\",\r\n    \"        showlegend=False,\\n\",\r\n    \"        visible=False\\n\",\r\n    \"    )\"\r\n   ],\r\n   \"id\": \"51bff841e8af1260\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 12\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-06-03T20:01:53.181329Z\",\r\n     \"start_time\": \"2025-06-03T20:01:53.014493Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# === File Paths ===\\n\",\r\n    \"\\n\",\r\n    \"embedding_path = os.path.join(DATA_DIR, \\\"emb\\\", \\\"NeurIPS\\\", \\\"2024\\\", \\\"20250602_2031\\\", \\\"emb.json\\\")\\n\",\r\n    \"metadata_path = os.path.join(DATA_DIR, \\\"unified_text\\\", \\\"NeurIPS\\\", \\\"NeurIPS_2024.json\\\")\\n\",\r\n    \"clustering_csv = os.path.join(PROJECT_ROOT, \\\"result\\\", \\\"NeurIPS\\\", \\\"2024\\\", \\\"20250602_2158\\\", \\\"clusters.csv\\\")\\n\",\r\n    \"\\n\",\r\n    \"embedding_dict = load_json(embedding_path)\\n\",\r\n    \"metadata_list = load_json(metadata_path)\\n\",\r\n    \"id_to_meta = {d['id']: d for d in metadata_list}\\n\",\r\n    \"\\n\",\r\n    \"clustering_dict = load_clustering(clustering_csv)\\n\",\r\n    \"node_ids = list(embedding_dict.keys())\\n\",\r\n    \"embeddings = np.array([embedding_dict[nid] for nid in node_ids])\\n\"\r\n   ],\r\n   \"id\": \"6ba30b3f8baee489\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 16\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2025-06-03T20:04:34.422226Z\",\r\n     \"start_time\": \"2025-06-03T20:04:34.236953Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# === PCA Projection ===\\n\",\r\n    \"proj = PCA(n_components=2).fit_transform(embeddings)\\n\",\r\n    \"id_to_proj = {nid: proj[i] for i, nid in enumerate(node_ids)}\\n\",\r\n    \"\\n\",\r\n    \"# === Baseline Coloring ===\\n\",\r\n    \"baseline_clusters = clustering_dict.get(\\\"Baseline\\\", {})\\n\",\r\n    \"unique_baseline_labels = sorted(set(baseline_clusters.get(nid, \\\"Unassigned\\\") for nid in node_ids))\\n\",\r\n    \"cmap = colormaps.get_cmap(\\\"Set2\\\").resampled(len(unique_baseline_labels))\\n\",\r\n    \"label_to_color = {\\n\",\r\n    \"    label: f\\\"rgb({r},{g},{b})\\\"\\n\",\r\n    \"    for i, label in enumerate(unique_baseline_labels)\\n\",\r\n    \"    for r, g, b in [tuple(int(x * 255) for x in cmap(i)[:3])]\\n\",\r\n    \"}\\n\",\r\n    \"\\n\",\r\n    \"# === Plotly Traces per Method ===\\n\",\r\n    \"data = []\\n\",\r\n    \"buttons = []\\n\",\r\n    \"method_names = list(clustering_dict.keys())\\n\",\r\n    \"\\n\",\r\n    \"for method in method_names:\\n\",\r\n    \"    cluster_map = clustering_dict[method]\\n\",\r\n    \"\\n\",\r\n    \"    x_vals, y_vals, hover_texts, colors = [], [], [], []\\n\",\r\n    \"    cluster_xys = {}  # cluster_label -> list of (x, y)\\n\",\r\n    \"\\n\",\r\n    \"    for nid in node_ids:\\n\",\r\n    \"        x, y = id_to_proj[nid]\\n\",\r\n    \"        x_vals.append(x)\\n\",\r\n    \"        y_vals.append(y)\\n\",\r\n    \"        baseline_label = baseline_clusters.get(nid, \\\"Unassigned\\\")\\n\",\r\n    \"        colors.append(label_to_color.get(baseline_label, \\\"gray\\\"))\\n\",\r\n    \"\\n\",\r\n    \"        cluster_label = cluster_map.get(nid, \\\"Unassigned\\\")\\n\",\r\n    \"        cluster_xys.setdefault(cluster_label, []).append((x, y))\\n\",\r\n    \"\\n\",\r\n    \"        meta = id_to_meta.get(nid, {})\\n\",\r\n    \"        hover = f\\\"\\\"\\\"\\n\",\r\n    \"        <b>{meta.get('title', '')}</b><br>\\n\",\r\n    \"        <i>{meta.get('authors', '')}</i><br><br>\\n\",\r\n    \"        <div style='max-height:100px; max-width:200px; overflow-y:auto; font-size:0.9em; line-height:1.2em;'>\\n\",\r\n    \"        {meta.get('abstract', '')}\\n\",\r\n    \"        </div>\\n\",\r\n    \"        \\\"\\\"\\\"\\n\",\r\n    \"        hover_texts.append(hover)\\n\",\r\n    \"\\n\",\r\n    \"    trace = go.Scatter(\\n\",\r\n    \"        x=x_vals,\\n\",\r\n    \"        y=y_vals,\\n\",\r\n    \"        mode='markers',\\n\",\r\n    \"        marker=dict(size=8, color=colors, line=dict(width=0.5, color='DarkSlateGrey')),\\n\",\r\n    \"        text=hover_texts,\\n\",\r\n    \"        hoverinfo='text',\\n\",\r\n    \"        name=method,\\n\",\r\n    \"        visible=(method == \\\"Baseline\\\")\\n\",\r\n    \"    )\\n\",\r\n    \"    data.append(trace)\\n\",\r\n    \"\\n\",\r\n    \"    # Add cluster hulls\\n\",\r\n    \"    for cluster_label, points in cluster_xys.items():\\n\",\r\n    \"        xs, ys = zip(*points)\\n\",\r\n    \"        hull_trace = cluster_hull_trace(xs, ys, cluster_label, color=\\\"gray\\\")\\n\",\r\n    \"        if hull_trace:\\n\",\r\n    \"            hull_trace.visible = (method == \\\"Baseline\\\")\\n\",\r\n    \"            data.append(hull_trace)\\n\",\r\n    \"\\n\",\r\n    \"    # Dropdown button\\n\",\r\n    \"    visible_flags = [(t.name == method) for t in data]\\n\",\r\n    \"    buttons.append(dict(\\n\",\r\n    \"        label=method,\\n\",\r\n    \"        method=\\\"update\\\",\\n\",\r\n    \"        args=[{\\\"visible\\\": visible_flags}, {\\\"title\\\": f\\\"Clustering Visualization — {method}\\\"}]\\n\",\r\n    \"    ))\\n\",\r\n    \"\\n\",\r\n    \"# === Layout ===\\n\",\r\n    \"layout = go.Layout(\\n\",\r\n    \"    title=\\\"Clustering Visualization — Baseline\\\",\\n\",\r\n    \"    updatemenus=[dict(\\n\",\r\n    \"        buttons=buttons,\\n\",\r\n    \"        direction=\\\"down\\\",\\n\",\r\n    \"        showactive=True,\\n\",\r\n    \"        x=0.1,\\n\",\r\n    \"        xanchor=\\\"left\\\",\\n\",\r\n    \"        y=1.15,\\n\",\r\n    \"        yanchor=\\\"top\\\"\\n\",\r\n    \"    )],\\n\",\r\n    \"    xaxis=dict(title=\\\"PCA 1\\\", showgrid=False, zeroline=False),\\n\",\r\n    \"    yaxis=dict(title=\\\"PCA 2\\\", showgrid=False, zeroline=False),\\n\",\r\n    \"    hovermode='closest',\\n\",\r\n    \"    hoverlabel=dict(\\n\",\r\n    \"        bgcolor=\\\"white\\\",\\n\",\r\n    \"        font_size=12,\\n\",\r\n    \"        font_family=\\\"Arial\\\",\\n\",\r\n    \"        align=\\\"left\\\"\\n\",\r\n    \"    ),\\n\",\r\n    \"    height=700\\n\",\r\n    \")\\n\",\r\n    \"\\n\",\r\n    \"fig = go.Figure(data=data, layout=layout)\\n\",\r\n    \"fig.write_html(\\\"interactive_clustering.html\\\")\\n\"\r\n   ],\r\n   \"id\": \"3a9fbcf50c50668b\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 19\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/cli/visual.ipynb b/src/cli/visual.ipynb
--- a/src/cli/visual.ipynb	(revision 6b2a23e8b10c5a79b8570e683be0a77ada438a43)
+++ b/src/cli/visual.ipynb	(date 1749060606648)
@@ -1,252 +1,164 @@
-{
- "cells": [
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-06-03T20:00:56.775486Z",
-     "start_time": "2025-06-03T20:00:56.769286Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "import json\n",
-    "import csv\n",
-    "import numpy as np\n",
-    "from sklearn.decomposition import PCA\n",
-    "import plotly.graph_objs as go\n",
-    "from matplotlib import colormaps\n",
-    "from scipy.spatial import ConvexHull\n",
-    "import os\n",
-    "from src import PROJECT_ROOT, DATA_DIR\n",
-    "from src.utils.io import load_json"
-   ],
-   "id": "4383970a382e1e1f",
-   "outputs": [],
-   "execution_count": 10
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-06-03T20:00:58.345654Z",
-     "start_time": "2025-06-03T20:00:58.338135Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "# === Load Clustering CSV ===\n",
-    "def load_clustering(file_path):\n",
-    "    clustering = {}  # method -> node_id -> cluster_label\n",
-    "    with open(file_path, newline='', encoding='utf-8') as f:\n",
-    "        reader = csv.DictReader(f)\n",
-    "        cluster_names = reader.fieldnames[1:]\n",
-    "        for row in reader:\n",
-    "            method = row[\"method\"]\n",
-    "            clustering[method] = {}\n",
-    "            for cluster_name in cluster_names:\n",
-    "                ids = row[cluster_name].split(\",\") if row[cluster_name] else []\n",
-    "                for node_id in ids:\n",
-    "                    node_id = node_id.strip()\n",
-    "                    if node_id:\n",
-    "                        clustering[method][node_id] = cluster_name\n",
-    "    return clustering\n"
-   ],
-   "id": "2c229559e6116cee",
-   "outputs": [],
-   "execution_count": 11
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-06-03T20:01:00.009169Z",
-     "start_time": "2025-06-03T20:01:00.002726Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "# === Convex Hull Generation ===\n",
-    "def cluster_hull_trace(xs, ys, cluster_name, color):\n",
-    "    if len(xs) < 3:\n",
-    "        return None  # Not enough points for a hull\n",
-    "    points = np.vstack((xs, ys)).T\n",
-    "    hull = ConvexHull(points)\n",
-    "    polygon = points[hull.vertices]\n",
-    "    return go.Scatter(\n",
-    "        x=polygon[:, 0].tolist() + [polygon[0, 0]],\n",
-    "        y=polygon[:, 1].tolist() + [polygon[0, 1]],\n",
-    "        fill='toself',\n",
-    "        mode='lines',\n",
-    "        name=f\"{cluster_name} boundary\",\n",
-    "        line=dict(color=color, width=1),\n",
-    "        fillcolor=color.replace(\"rgb\", \"rgba\").replace(\")\", \",0.15)\"),\n",
-    "        hoverinfo='skip',\n",
-    "        showlegend=False,\n",
-    "        visible=False\n",
-    "    )"
-   ],
-   "id": "51bff841e8af1260",
-   "outputs": [],
-   "execution_count": 12
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-06-03T20:01:53.181329Z",
-     "start_time": "2025-06-03T20:01:53.014493Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "# === File Paths ===\n",
-    "\n",
-    "embedding_path = os.path.join(DATA_DIR, \"emb\", \"NeurIPS\", \"2024\", \"20250602_2031\", \"emb.json\")\n",
-    "metadata_path = os.path.join(DATA_DIR, \"unified_text\", \"NeurIPS\", \"NeurIPS_2024.json\")\n",
-    "clustering_csv = os.path.join(PROJECT_ROOT, \"result\", \"NeurIPS\", \"2024\", \"20250602_2158\", \"clusters.csv\")\n",
-    "\n",
-    "embedding_dict = load_json(embedding_path)\n",
-    "metadata_list = load_json(metadata_path)\n",
-    "id_to_meta = {d['id']: d for d in metadata_list}\n",
-    "\n",
-    "clustering_dict = load_clustering(clustering_csv)\n",
-    "node_ids = list(embedding_dict.keys())\n",
-    "embeddings = np.array([embedding_dict[nid] for nid in node_ids])\n"
-   ],
-   "id": "6ba30b3f8baee489",
-   "outputs": [],
-   "execution_count": 16
-  },
-  {
-   "metadata": {
-    "ExecuteTime": {
-     "end_time": "2025-06-03T20:04:34.422226Z",
-     "start_time": "2025-06-03T20:04:34.236953Z"
-    }
-   },
-   "cell_type": "code",
-   "source": [
-    "# === PCA Projection ===\n",
-    "proj = PCA(n_components=2).fit_transform(embeddings)\n",
-    "id_to_proj = {nid: proj[i] for i, nid in enumerate(node_ids)}\n",
-    "\n",
-    "# === Baseline Coloring ===\n",
-    "baseline_clusters = clustering_dict.get(\"Baseline\", {})\n",
-    "unique_baseline_labels = sorted(set(baseline_clusters.get(nid, \"Unassigned\") for nid in node_ids))\n",
-    "cmap = colormaps.get_cmap(\"Set2\").resampled(len(unique_baseline_labels))\n",
-    "label_to_color = {\n",
-    "    label: f\"rgb({r},{g},{b})\"\n",
-    "    for i, label in enumerate(unique_baseline_labels)\n",
-    "    for r, g, b in [tuple(int(x * 255) for x in cmap(i)[:3])]\n",
-    "}\n",
-    "\n",
-    "# === Plotly Traces per Method ===\n",
-    "data = []\n",
-    "buttons = []\n",
-    "method_names = list(clustering_dict.keys())\n",
-    "\n",
-    "for method in method_names:\n",
-    "    cluster_map = clustering_dict[method]\n",
-    "\n",
-    "    x_vals, y_vals, hover_texts, colors = [], [], [], []\n",
-    "    cluster_xys = {}  # cluster_label -> list of (x, y)\n",
-    "\n",
-    "    for nid in node_ids:\n",
-    "        x, y = id_to_proj[nid]\n",
-    "        x_vals.append(x)\n",
-    "        y_vals.append(y)\n",
-    "        baseline_label = baseline_clusters.get(nid, \"Unassigned\")\n",
-    "        colors.append(label_to_color.get(baseline_label, \"gray\"))\n",
-    "\n",
-    "        cluster_label = cluster_map.get(nid, \"Unassigned\")\n",
-    "        cluster_xys.setdefault(cluster_label, []).append((x, y))\n",
-    "\n",
-    "        meta = id_to_meta.get(nid, {})\n",
-    "        hover = f\"\"\"\n",
-    "        <b>{meta.get('title', '')}</b><br>\n",
-    "        <i>{meta.get('authors', '')}</i><br><br>\n",
-    "        <div style='max-height:100px; max-width:200px; overflow-y:auto; font-size:0.9em; line-height:1.2em;'>\n",
-    "        {meta.get('abstract', '')}\n",
-    "        </div>\n",
-    "        \"\"\"\n",
-    "        hover_texts.append(hover)\n",
-    "\n",
-    "    trace = go.Scatter(\n",
-    "        x=x_vals,\n",
-    "        y=y_vals,\n",
-    "        mode='markers',\n",
-    "        marker=dict(size=8, color=colors, line=dict(width=0.5, color='DarkSlateGrey')),\n",
-    "        text=hover_texts,\n",
-    "        hoverinfo='text',\n",
-    "        name=method,\n",
-    "        visible=(method == \"Baseline\")\n",
-    "    )\n",
-    "    data.append(trace)\n",
-    "\n",
-    "    # Add cluster hulls\n",
-    "    for cluster_label, points in cluster_xys.items():\n",
-    "        xs, ys = zip(*points)\n",
-    "        hull_trace = cluster_hull_trace(xs, ys, cluster_label, color=\"gray\")\n",
-    "        if hull_trace:\n",
-    "            hull_trace.visible = (method == \"Baseline\")\n",
-    "            data.append(hull_trace)\n",
-    "\n",
-    "    # Dropdown button\n",
-    "    visible_flags = [(t.name == method) for t in data]\n",
-    "    buttons.append(dict(\n",
-    "        label=method,\n",
-    "        method=\"update\",\n",
-    "        args=[{\"visible\": visible_flags}, {\"title\": f\"Clustering Visualization — {method}\"}]\n",
-    "    ))\n",
-    "\n",
-    "# === Layout ===\n",
-    "layout = go.Layout(\n",
-    "    title=\"Clustering Visualization — Baseline\",\n",
-    "    updatemenus=[dict(\n",
-    "        buttons=buttons,\n",
-    "        direction=\"down\",\n",
-    "        showactive=True,\n",
-    "        x=0.1,\n",
-    "        xanchor=\"left\",\n",
-    "        y=1.15,\n",
-    "        yanchor=\"top\"\n",
-    "    )],\n",
-    "    xaxis=dict(title=\"PCA 1\", showgrid=False, zeroline=False),\n",
-    "    yaxis=dict(title=\"PCA 2\", showgrid=False, zeroline=False),\n",
-    "    hovermode='closest',\n",
-    "    hoverlabel=dict(\n",
-    "        bgcolor=\"white\",\n",
-    "        font_size=12,\n",
-    "        font_family=\"Arial\",\n",
-    "        align=\"left\"\n",
-    "    ),\n",
-    "    height=700\n",
-    ")\n",
-    "\n",
-    "fig = go.Figure(data=data, layout=layout)\n",
-    "fig.write_html(\"interactive_clustering.html\")\n"
-   ],
-   "id": "3a9fbcf50c50668b",
-   "outputs": [],
-   "execution_count": 19
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 2
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython2",
-   "version": "2.7.6"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
+#%%
+import json
+import csv
+import numpy as np
+from sklearn.decomposition import PCA
+import plotly.graph_objs as go
+from matplotlib import colormaps
+from scipy.spatial import ConvexHull
+import os
+from src import PROJECT_ROOT, DATA_DIR
+from src.utils.io import load_json
+#%%
+# === Load Clustering CSV ===
+def load_clustering(file_path):
+    clustering = {}  # method -> node_id -> cluster_label
+    with open(file_path, newline='', encoding='utf-8') as f:
+        reader = csv.DictReader(f)
+        cluster_names = reader.fieldnames[1:]
+        for row in reader:
+            method = row["method"]
+            clustering[method] = {}
+            for cluster_name in cluster_names:
+                ids = row[cluster_name].split(",") if row[cluster_name] else []
+                for node_id in ids:
+                    node_id = node_id.strip()
+                    if node_id:
+                        clustering[method][node_id] = cluster_name
+    return clustering
+
+#%%
+# === Convex Hull Generation ===
+def cluster_hull_trace(xs, ys, cluster_name, color):
+    if len(xs) < 3:
+        return None  # Not enough points for a hull
+    points = np.vstack((xs, ys)).T
+    hull = ConvexHull(points)
+    polygon = points[hull.vertices]
+    return go.Scatter(
+        x=polygon[:, 0].tolist() + [polygon[0, 0]],
+        y=polygon[:, 1].tolist() + [polygon[0, 1]],
+        fill='toself',
+        mode='lines',
+        name=f"{cluster_name} boundary",
+        line=dict(color=color, width=1),
+        fillcolor=color.replace("rgb", "rgba").replace(")", ",0.15)"),
+        hoverinfo='skip',
+        showlegend=False,
+        visible=False
+    )
+#%%
+# === File Paths ===
+
+embedding_path = os.path.join(DATA_DIR, "emb", "NeurIPS", "2024", "20250602_2031", "emb.json")
+metadata_path = os.path.join(DATA_DIR, "unified_text", "NeurIPS", "NeurIPS_2024.json")
+clustering_csv = os.path.join(PROJECT_ROOT, "result", "NeurIPS", "2024", "20250602_2158", "clusters.csv")
+
+embedding_dict = load_json(embedding_path)
+metadata_list = load_json(metadata_path)
+id_to_meta = {d['id']: d for d in metadata_list}
+
+clustering_dict = load_clustering(clustering_csv)
+node_ids = list(embedding_dict.keys())
+embeddings = np.array([embedding_dict[nid] for nid in node_ids])
+
+#%%
+# === PCA Projection ===
+proj = PCA(n_components=2).fit_transform(embeddings)
+id_to_proj = {nid: proj[i] for i, nid in enumerate(node_ids)}
+
+# === Baseline Coloring ===
+baseline_clusters = clustering_dict.get("Baseline", {})
+unique_baseline_labels = sorted(set(baseline_clusters.get(nid, "Unassigned") for nid in node_ids))
+cmap = colormaps.get_cmap("Set2").resampled(len(unique_baseline_labels))
+label_to_color = {
+    label: f"rgb({r},{g},{b})"
+    for i, label in enumerate(unique_baseline_labels)
+    for r, g, b in [tuple(int(x * 255) for x in cmap(i)[:3])]
 }
+
+# === Plotly Traces per Method ===
+data = []
+buttons = []
+method_names = list(clustering_dict.keys())
+
+for method in method_names:
+    cluster_map = clustering_dict[method]
+
+    x_vals, y_vals, hover_texts, colors = [], [], [], []
+    cluster_xys = {}  # cluster_label -> list of (x, y)
+
+    for nid in node_ids:
+        x, y = id_to_proj[nid]
+        x_vals.append(x)
+        y_vals.append(y)
+        baseline_label = baseline_clusters.get(nid, "Unassigned")
+        colors.append(label_to_color.get(baseline_label, "gray"))
+
+        cluster_label = cluster_map.get(nid, "Unassigned")
+        cluster_xys.setdefault(cluster_label, []).append((x, y))
+
+        meta = id_to_meta.get(nid, {})
+        hover = f"""
+        <b>{meta.get('title', '')}</b><br>
+        <i>{meta.get('authors', '')}</i><br><br>
+        <div style='max-height:100px; max-width:200px; overflow-y:auto; font-size:0.9em; line-height:1.2em;'>
+        {meta.get('abstract', '')}
+        </div>
+        """
+        hover_texts.append(hover)
+
+    trace = go.Scatter(
+        x=x_vals,
+        y=y_vals,
+        mode='markers',
+        marker=dict(size=8, color=colors, line=dict(width=0.5, color='DarkSlateGrey')),
+        text=hover_texts,
+        hoverinfo='text',
+        name=method,
+        visible=(method == "Baseline")
+    )
+    data.append(trace)
+
+    # Add cluster hulls
+    for cluster_label, points in cluster_xys.items():
+        xs, ys = zip(*points)
+        hull_trace = cluster_hull_trace(xs, ys, cluster_label, color="gray")
+        if hull_trace:
+            hull_trace.visible = (method == "Baseline")
+            data.append(hull_trace)
+
+    # Dropdown button
+    visible_flags = [(t.name == method) for t in data]
+    buttons.append(dict(
+        label=method,
+        method="update",
+        args=[{"visible": visible_flags}, {"title": f"Clustering Visualization — {method}"}]
+    ))
+
+# === Layout ===
+layout = go.Layout(
+    title="Clustering Visualization — Baseline",
+    updatemenus=[dict(
+        buttons=buttons,
+        direction="down",
+        showactive=True,
+        x=0.1,
+        xanchor="left",
+        y=1.15,
+        yanchor="top"
+    )],
+    xaxis=dict(title="PCA 1", showgrid=False, zeroline=False),
+    yaxis=dict(title="PCA 2", showgrid=False, zeroline=False),
+    hovermode='closest',
+    hoverlabel=dict(
+        bgcolor="white",
+        font_size=12,
+        font_family="Arial",
+        align="left"
+    ),
+    height=700
+)
+
+fig = go.Figure(data=data, layout=layout)
+fig.write_html("interactive_clustering.html")
